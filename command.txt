使用diff查找bug
diff -u newfile oldfile

在命令行中部署subl命令，直接打开Sublime Text 2
链接如下：https://www.udacity.com/wiki/ud775/sublime
使用命令：
subl lesson_1_reflections.txt # 启动 Sublime Text，并打开名为 lesson_1_reflections.txt 的文件（如果你更喜欢使用其他编辑器，则可将 subl 替换为该编辑器的名称）


常用命令
mkdir version-control               # 创建 version-control 目录
cd version-control                  # 转到 version-control 目录
mv old-file-name new-file-name      # 更改文件名


什么时候提交版本？
——为每项逻辑更改进行一次提交   是很好的经验法则

在选择是否提交时，只需记住：每个提交都应具有一个清晰的逻辑目的，而且绝不应在不进行提交的情况下完成过多工作。


git命令
git clone URL： 下载内容

获得彩色输出
要获得彩色的 diff 输出，请运行 git config --global color.ui auto

git log
查看log
要停止查看 git log 的输出，请按 q（表示退出）。

git diff old_file new_file
对比两个文件

git checkout:
类似于恢复之前的版本。在git中，checkout a commit是指将所有文件重置到进行commit时的文件的状态

为什么要check out之前的代码？
理由之一：出现了bug，但是你不知道是哪个commit造成的，你就可以通过check out这个commit，并运行代码，看看是不是这个commit具有该bug


Git 错误和警告解决方案
Should not be doing an octopus（不应执行 octopus）

Octopus 是 Git 用来合并多个不同代码版本的一种策略。如果在不合适的情况下尝试使用该策略，则可能会出现此消息。

You are in 'detached HEAD' state（你处于“分离的 HEAD”状态）

Git 将你目前所在的提交称为 HEAD。可通过切换到前一个提交来“分离”HEAD，这在下一个视频中有说明。虽然此警告听起来不太好，但分离 HEAD 实际上不是坏事。Git 只是向你发出警告，以便你知道自己正在这样做。

