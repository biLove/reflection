初始化版本库时会发生什么情况？为什么你需要这样做？
	
	用git init初始化后会新建两个新文件 .git和.DS_Store
	用git status来查看当前版本库的状态，发现有新文件没有提交。
	这样做可以随时了解版本库的状态。

暂存区与工作目录和版本库有何不同？你认为它具有什么价值？
	
	工作目录：是保存用户目前正在处理的文件的目录
	暂存区：是工作目录和版本库中间的暂存区域，让用户先将需要变更的文件提交到暂存区，再由暂存区提交到版本库
	版本库：用来存储所有的版本变更

	暂存区的价值：避免直接操作版本库，排除工作目录里的不必要的文件提交。

如何使用暂存区确保为每项逻辑更改进行一次提交？
	
	暂存区里面的文件都是对同一项逻辑进行的更改，改完该逻辑后，可以提交新版本。如果有文件更改不属于这个逻辑，可以使用git reset filename来从暂存区去掉这个逻辑。

在哪些情况下，分支可以帮助你有序地组织历史记录？分支将如何提供帮助？
	
	当想进行一些新的尝试，又不想更改主干时，可以创建一个分支来完成这项尝试。这样分支上的改动将不会影响主线的改动。

图表如何帮助你直观显示分支结构？
	
	图表通过与父commit相连，帮助我们直观的找到每个分支的路径。

将两个分支合并到一起有何结果？为什么我们在图表中表示它的方式是那样的？
	
	将两个分支合并到一起可以整合两个分支进行的修改，让两个分支合成一个分支，可以进行下一步的工作。
	在图表中的表现是以合并时检出的分支为主要分支，将其他需要合并的分支合并到该分支上。

Git 的自动合并与始终手动进行合并各有何优缺点？
	
	git自动识别的部分是不存在冲突的部分，自动识别会比较方便，如果存在冲突的部分也自动识别的话，对于git来说，会很麻烦，而且容易出错。
	始终手动进行合并的话，对于操作者来说就太繁琐了，git只对存在冲突的文件手动合并，既能很好的知道冲突的原因，又能避免反复操作。